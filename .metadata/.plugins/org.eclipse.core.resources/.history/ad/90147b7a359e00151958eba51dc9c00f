import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;


public class NearestNeighborClassifier {
	
	private Map<Integer, List<Map<Integer, Double>>> data;
	private int numFeatures;
	
	public NearestNeighborClassifier(Map<Integer, List<Map<Integer, Double>>> data) {
		this.data = data;
		this.numFeatures = extractAllFeatureSet().keySet().size();
	}
	
	public Map<Integer, List<Map<Integer, Double>>> getData() {
		return data;
	}

	public void setData(Map<Integer, List<Map<Integer, Double>>> data) {
		this.data = data;
	}

	/*
	 * K-fold cross validation
	 * Accuracy = [# of correct] / [# of instance in DB]
	 */
	public double crossValidation(double correct) {
		//needs to implement
		return correct/getNumInstances();
	}
	
	
	public double distanceCalc(double x, double y) {
		return (x-y) * (x-y);
	}
	
	public Pair getNearestNeighbor(double x, List<Pair> featureSet) {
		Pair nearest = null;
		double nearestDistance = 5000;
		for (Pair p : featureSet){
			if(nearest==null)
				nearest = p;
			double distance = distanceCalc(x, p.getSecond());
			if(distance < nearestDistance && distance!=0) {
				nearest = p;
				nearestDistance =distance;
			}
		}		
		return nearest;
	}
	
	public int getNumInstances() {
		int totalCount = 0;
		for(int classNo : data.keySet()) { //for every class
			for(Map<Integer, Double> features : data.get(classNo)){ //for each row of features
				totalCount = totalCount + 1;
			}
		}
		return totalCount;
	}
	
	public List<Pair> extractFeatureSet(int featureNo) {
		List<Pair> featureSet = new LinkedList<Pair> ();
		for(int classNo: data.keySet()) {
			for(Map<Integer, Double> features: data.get(classNo)){
				featureSet.add(new Pair(classNo, features.get(featureNo)));
			}
		}
		return featureSet;
	}
	
	

	public int oneDimentionEvaluation(List<Pair> featureSet) {
		int numCorrect = 0;
		for (Pair p : featureSet){
			Pair nearestNeighbor = getNearestNeighbor(p.getSecond(), featureSet);
			if(nearestNeighbor.getFirst().equals(p.getFirst())) {
				numCorrect = numCorrect + 1;
			}
		}
		return numCorrect;
	}

	
	
	public Map<Integer, List<Pair>> extractAllFeatureSet() {
		Map<Integer, List<Pair>> allFeatureSet = new HashMap<Integer, List<Pair>>();
		
		for(int classNo : data.keySet()) { //for every class
			for(Map<Integer, Double> features : data.get(classNo)){ //for each row of features
				for(int i = 0; features.containsKey(i); i++) {	//features of each column
					//System.out.println("Class NO" + classNo + "\t" + "Feature" + i + " : " + features.get(i));
					Pair set = new Pair(classNo, features.get(i));
					if(allFeatureSet.containsKey(i)) {
						allFeatureSet.get(i).add(set);
					} else {
						List<Pair> list= new LinkedList<Pair> ();
						list.add(set);
						allFeatureSet.put(i, list);
					}
				}
			}
		}
		
		return allFeatureSet;
	}
	
	public int findBestFeature() {
		Map<Integer, List<Pair>> allFeatureSet = extractAllFeatureSet();
		double bestScore = 0.0;
		int bestFeature = -1;
		for(Integer feature: allFeatureSet.keySet()) {
			double score = crossValidation(oneDimentionEvaluation(allFeatureSet.get(feature)));
			if(score>bestScore) {
				bestFeature = feature;
				bestScore = score;
			}
			//System.out.println("Feature " + feature + "\tScore : " + score);
			
		}
		return bestFeature;
	}
	
	public Map<Integer, Boolean> bestComboInit() {
		Map<Integer, Boolean> init = new HashMap<Integer, Boolean> ();
		for(Integer feature: extractAllFeatureSet().keySet() ) {
			init.put(feature, false);
		}
		return init;
	}
	
	public void forwardSelection() {
		Map<Integer, Boolean> bestCombo = bestComboInit();
		
		//find first feature and set it to true;
		Integer bestFeature = findBestFeature();
		bestCombo.put(bestFeature, true);
		
		for(int i = 0; i< numFeatures; i++){
			
		}
		
	}
}
